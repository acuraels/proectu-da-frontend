import React, { useState, useRef, useEffect } from 'react';
import { Send, Sparkles, Users, Target, Award } from 'lucide-react';
import "./HomePageMain.css";

interface Message {
    id: number;
    text: string;
    isUser: boolean;
    timestamp: Date;
}

const HomePageMain = () => {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: 1,
            text: "–ü—Ä–∏–≤–µ—Ç! üëã –Ø ProectuDa AI - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥—Ä–∞–Ω—Ç–∞–º –∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!",
            isUser: false,
            timestamp: new Date()
        }
    ]);
    const [inputValue, setInputValue] = useState('');
    const [isTyping, setIsTyping] = useState(false);

    const [isVisible, setIsVisible] = useState(false);

    useEffect(() => {
        setIsVisible(true);
    }, []);

    const messagesEndRef = useRef<HTMLDivElement>(null);
    const chatMessagesRef = useRef<HTMLDivElement>(null);

    const scrollToBottom = (smooth = true) => {
        if (chatMessagesRef.current) {
            chatMessagesRef.current.scrollTo({
                top: chatMessagesRef.current.scrollHeight,
                behavior: smooth ? "smooth" : "auto"
            });
        }
    };

    useEffect(() => {
        if (window.innerWidth < 3048) {
            if (messages.length === 1) {
                scrollToBottom(false);
            } else {
                scrollToBottom();
            }
        }
    }, [messages]);

    const handleSendMessage = async () => {
        if (!inputValue.trim()) return;

        const newUserMessage: Message = {
            id: messages.length + 1,
            text: inputValue,
            isUser: true,
            timestamp: new Date()
        };

        setMessages(prev => [...prev, newUserMessage]);
        setInputValue('');
        setIsTyping(true);

        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        setTimeout(() => {
            const aiResponse: Message = {
                id: messages.length + 2,
                text: "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –æ–±—É—á–∞—é—Å—å –∏ —Å–∫–æ—Ä–æ —Å–º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø–æ–∏—Å–∫–æ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤ –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üöÄ",
                isUser: false,
                timestamp: new Date()
            };
            setMessages(prev => [...prev, aiResponse]);
            setIsTyping(false);
        }, 1500);
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    return (
        <div className="main-container">
            <main className="main-content">
                {/* Hero Section */}
                <section className={`hero-section ${isVisible ? 'fade-in' : ''}`}>
                    <div className="hero-content">
                        <h1 className="hero-title">
                            –ü—Ä–æ–µ–∫—Ç—É<span className="hero-accent">–î–∞!</span>
                        </h1>
                        <p className="hero-subtitle">
                            –ë–µ—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ —Å–≤–æ–∏ —Ä—É–∫–∏! <strong>ProectuDa AI</strong> ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –≥—Ä–∞–Ω—Ç–æ–≤ –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤
                        </p>
                    </div>
                </section>

                {/* AI Chat Section */}
                <section className={`ai-chat-section ${isVisible ? 'slide-up' : ''}`}>
                    <div className="chat-container">
                        <div className="chat-header">
                            <div className="chat-header-content">
                                <div className="ai-avatar">
                                    <Sparkles size={24} />
                                </div>
                                <div>
                                    <h3>ProectuDa AI</h3>
                                    <span className="status-indicator">
                                        <div className="status-dot"></div>
                                        –í —Å–µ—Ç–∏
                                    </span>
                                </div>
                            </div>
                        </div>

                        <div className="chat-messages" ref={chatMessagesRef}>
                            {messages.map((message) => (
                                <div
                                    key={message.id}
                                    className={`message ${message.isUser ? 'user-message' : 'ai-message'}`}
                                >
                                    <div className="message-content">
                                        <p>{message.text}</p>
                                        <span className="message-time">
                                            {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                        </span>
                                    </div>
                                </div>
                            ))}

                            {isTyping && (
                                <div className="message ai-message">
                                    <div className="message-content">
                                        <div className="typing-indicator">
                                            <span></span>
                                            <span></span>
                                            <span></span>
                                        </div>
                                    </div>
                                </div>
                            )}
                            <div ref={messagesEndRef} />
                        </div>

                        <div className="chat-input-container">
                            <div className="chat-input-wrapper">
                                <textarea
                                    value={inputValue}
                                    onChange={(e) => setInputValue(e.target.value)}
                                    onKeyPress={handleKeyPress}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å"
                                    rows={1}
                                    className="chat-input"
                                />
                                <button
                                    onClick={handleSendMessage}
                                    disabled={!inputValue.trim()}
                                    className="send-button"
                                >
                                    <Send size={20} />
                                </button>
                            </div>
                        </div>
                    </div>
                </section>

                {/* About Section */}
                <section className={`about-section ${isVisible ? 'fade-in-delayed' : ''}`}>
                    <div className="about-content">
                        <h2>–û –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ</h2>
                        <p className="about-description">
                            –ú—ã ‚Äî –∞–º–±–∏—Ü–∏–æ–∑–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –±–æ–ª—å—à–æ–π –ø—É—Ç—å –æ—Ç –Ω–µ—É–¥–∞—á –¥–æ –ø–æ–±–µ–¥
                            –≤ —Å—Ñ–µ—Ä–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–ª–æ–¥–µ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
                        </p>

                        <div className="features-grid">
                            <div className="feature-card">
                                <div className="feature-icon">
                                    <Users size={28} />
                                </div>
                                <h3>–û–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</h3>
                                <p>–°—Ç—É–¥–µ–Ω—Ç—ã —Å –±–æ–≥–∞—Ç—ã–º –æ–ø—ã—Ç–æ–º —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö</p>
                            </div>

                            <div className="feature-card">
                                <div className="feature-icon">
                                    <Target size={28} />
                                </div>
                                <h3>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥</h3>
                                <p>–ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
                            </div>

                            <div className="feature-card">
                                <div className="feature-icon">
                                    <Award size={28} />
                                </div>
                                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç</h3>
                                <p>–ü–æ–º–æ–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
                            </div>
                        </div>

                        <div className="cta-section">
                            <h3>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ —Å–∫–∞–∂–∏ –ø—Ä–æ–µ–∫—Ç—É: "–î–∞"!</h3>
                            <p>–ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è</p>
                        </div>
                    </div>
                </section>
            </main>
        </div>
    );
};

export default HomePageMain;